What happens when you initialize a repository? Why do you need to do it?

Git creates a hidden folder that it uses to track changes made to files in the
repository. 
In order to use any of the version control features of git you have to first
create the repository. 

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area allows you to control what does, and does not, go into a
commit. Without a staging area the only choice would be to either add all
files in the directory to a commit, or add none. 
There are various reasons why one would need to select to not have ceratin
files added in a commit to a repository, such as vim swap files or
environmental configurations that contain senstive data that you not want to
make publically avaiable on GitHub.

How can you use the staging area to make sure you have one commit per logical change?

Utilizing the git diff, and the --staged tag, command allows me to clearly
track changes between my working directory, the staging area, and the most
recent commit. 
With these tools I should easily be able to identify exactly what I have
changed, and only add the correct changes to the staging area and commit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches allow me to keep a current "production" ready code base that I can
easily switch back to when I need to fix bugs or introduce quick features to
my "production" site. I then can switch back to my "development" branches to
work on the really big changes that I am working on introducing to the
"production" branch eventually.  

How do the diagrams help you visualize the branch structure?

Since git's branching structure makes it possible to create commits that can
be loss to git's log, it can help to use the graph diagram to completely
visualize where you are currently in the structure, and what connections might
need to be made in order to not lose your place. 

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Mering two branches together means that you merge together all changes made in
two branches into one commit. This also makes the parent of that commit the
last node in the two branches that were merged. This also means that running
git log will show all commits in both branches all the way back to the initial
commit.
